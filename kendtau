#include<iostream>
#include<fstream>
#include<sstream>
#include<map>
#include <ctime>
#include<string>
using namespace std;

//Merging 2 arrays arr1 and arr2
size_t merge(size_t arr1[],size_t size1,size_t arr2[],size_t size2,size_t temp[])
{
	size_t count  = 0;
	size_t a = 0;
	size_t b = 0;
	size_t c = 0;
	while(a < size1 && b < size2)
	{
		if(arr1[a] < arr2[b])
		{
			temp[c] = arr1[a];
			c++;
			a++;
		}else{
			temp[c] = arr2[b];
			b++;
			c++;
			count = count + size1 -a;
		}
	}

	while(a < size1)
	{
		temp[c] = arr1[a];
		c++;a++;
	}

	while(b < size2)
	{
		temp[c] = arr2[b];
		c++;b++;
	}

	return count;
}






size_t distance(size_t arr[],size_t size)
{
	if(size > 1 )
	{
        size_t count1 =0;
        size_t count2=0;
        size_t count3=0;
		size_t mid = size / 2;
        count1 = distance(arr,mid);
		 count2 = distance(arr+mid,size-mid);
		size_t temp[size];
		 count3 = merge(arr,mid,arr+mid,size-mid,temp);
		for(size_t x =0;x<size ;x++)
		{
			arr[x] = temp[x];
		}
		return count1 + count2 + count3;
	}else{
		return 0;
	}
}





size_t kendalltau( string data0,string data1)
{
	ifstream fin1,fin2;
	fin1.open(data0.c_str());
	size_t p = data0.find(".");
	string sub = data0.substr(p+1);
	size_t N;
	istringstream iss1(sub);
	iss1>>N;
	size_t a[N];
	size_t b[N];
	if (fin1.is_open())
	{
		string line;
		size_t value;
		size_t i=0;
		while (getline(fin1,line))
		{
			istringstream iss(line);
			iss>>value;
			a[i]=value;
			i++;
		}
		fin1.close();
	}

	fin2.open(data1.c_str());
	if ( fin2.is_open())
	{       string line;
		size_t value;
		size_t i=0;
		while (getline(fin2,line))
		{
			istringstream iss(line);
			iss>>value;
			b[i]=value;
			i++;
		}
		fin2.close();
	}
	//Logic taken from Sedgewick Kendall Tau http://algs4.cs.princeton.edu/25applications/KendallTau.java.html
	size_t ainv[N];
	size_t bnew[N];
	for (size_t i = 0; i<N; i++)
	{
		ainv[a[i]]=i;// Storing Order Stats of each element
	}

	for (size_t i=0; i<N; i++)
	{
		bnew[i] = ainv[b[i]];//Actual location where element at ith location must be placed to match a[i]
	}
	return distance(bnew, N);
}

int main ( int argc, char* argv[])
{
	if (argc<3)
	{
		cout<<"Enter files data0.* and data1.* as argv1,argv2\n";
		exit(0);
	}
	string data0 = argv[1];
	string data1 = argv[2];
	size_t p = data0.find(".");
	string sub = data0.substr(p+1);
	size_t N;
	istringstream iss1(sub);
	iss1>>N;
	size_t normalize_D = N*(N-1)/2;
	cout<<endl;
	double elapsed_secs;
	std::clock_t begin = clock();
	size_t k =kendalltau(data0,data1);
	std::clock_t end = clock();
	double k_normalized = (double)(k)/(double)(normalize_D);
	cout<<"Kendall Tau Distance "<<k<<endl;
	cout<<"Normalized Kendall Tau Distance  "<<k_normalized<<endl;
	elapsed_secs = double(end - begin)/ CLOCKS_PER_SEC;
	cout<<endl;
        cout<<"Elapsed Seconds"<<elapsed_secs;
	cout<<endl;
	return 0;
}
